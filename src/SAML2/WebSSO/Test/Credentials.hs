{-# LANGUAGE OverloadedStrings   #-}
{-# OPTIONS_GHC -Wno-incomplete-uni-patterns #-}

-- | Two (weak) reasons why I implemented the clients without the help of servant-client: (1) I
-- wanted smooth integration in 'HttpMonad'; (2) I wanted the choice of receiving the unparsed
-- 'ResponseLBS' rather than the parsed result (or a hard-to examine error).  this is important for
-- testing for expected failures.  See also: https://github.com/haskell-servant/servant/issues/1004
--
-- FUTUREWORK: this is all copied from /services/galley/test/integration/API/Util.hs and some other
-- places; should we make this a new library?  (@tiago-loureiro says no that's fine.)
module SAML2.WebSSO.Test.Credentials where

import Crypto.PubKey.RSA.Types
import Data.Either
import Data.X509 as X509
import GHC.Stack
import Prelude hiding (head)
import SAML2.WebSSO as SAML
import Text.XML.DSig as SAML
import URI.ByteString
import URI.ByteString.QQ


sampleIdP :: HasCallStack => URI -> URI -> NewIdP
sampleIdP metaURI reqURI = NewIdP
  { _nidpMetadata        = metaURI
  , _nidpIssuer          = SAML.Issuer [uri|https://idp.net/|]
  , _nidpRequestUri      = reqURI
  , _nidpPublicKey       = sampleIdPCert
  }

sampleIdPPrivkey :: SAML.SignPrivCreds
sampleIdPPubkey :: SAML.SignCreds
sampleIdPCert :: X509.SignedCertificate
(sampleIdPPrivkey, sampleIdPPubkey, sampleIdPCert) =
  ( SignPrivCreds SignDigestSha256 (SignPrivKeyRSA (KeyPair (PrivateKey {private_pub = PublicKey {public_size = 192, public_n = 1825236385615082686829981801822552281245793668757656662664568735544243260083198342874114496793815447426650983140543190311453669168459129551695143179070578277699945895401517935361517106512814862763009839741333683437167687091086671669597110367935877054163085623461134458341252597891922328070669755742493104204366455884431673612053282382492967629262141815802754809127729578399875382540168957383716983426935239687352890911547660109039098431015324137357333361774688857, public_e = 17}, private_d = 536834231063259613773524059359574200366409902575781371371931981042424488259764218492386616704063366890191465629571526562192255637782096926969159758550170081676454675118093510400446207797886724342061717570980495128578731497378432843203744453600116619164833540184730292351579214968625975170289129584598638586628840891586028758880577428210289252290954745162206609599657832405046995441606039153696516294106160931718772523817568332169962980387935630165058411857225793, private_p = 1408584324286305536461660321610687826309747570878072517266997224150546200816414282738962928862356015108202844323931598811915889582989586732935020417082497224055485902585947153087847890620641546149907491562244183456389982434327819029, private_q = 1295794901409175012540991265222363638036135696120521495224689491004311532193414114114076246969503304018375139847541296870335362753499306215287695180956211200205662925441027139431661173709926381629753732735452159538406152327132302133, private_dP = 165715802857212416054312979013022097212911478926832060854940849900064258919578150910466226924983060600965040508697835154343045833292892556815884754950882026359468929715993782716217398896546064252930293124969903936045880286391508121, private_dQ = 457339376967944122073291034784363636953930245689595821844008055648580540774146157922615145989236460241779461122661634189530128030646813958336833593278662776543175150155656637446468649544679899398736611553688997484143347880164341929, private_qinv = 1166453595319349588427991988293734177369744099337083142382991822395028451721547407635299602461878891038570450654877543188634860062629426191366702291794620098591017868209994898858991328804814767264585715915135689652618491628445860264})))
  , SignCreds SignDigestSha256 (SignKeyRSA (PublicKey {public_size = 192, public_n = 1825236385615082686829981801822552281245793668757656662664568735544243260083198342874114496793815447426650983140543190311453669168459129551695143179070578277699945895401517935361517106512814862763009839741333683437167687091086671669597110367935877054163085623461134458341252597891922328070669755742493104204366455884431673612053282382492967629262141815802754809127729578399875382540168957383716983426935239687352890911547660109039098431015324137357333361774688857, public_e = 17}))
  , either error id $ decodeSignedObject "0\130\SOH\255\&0\130\SOH(\160\ETX\STX\SOH\STX\STX\SO\DC3 Y\141j\211\RS\169\160\EOT\240\NAK\144\ENQ0\r\ACK\t*\134H\134\247\r\SOH\SOH\v\ENQ\NUL0\NUL0\RS\ETB\r180816124357Z\ETB\r380811124357Z0\NUL0\129\221\&0\r\ACK\t*\134H\134\247\r\SOH\SOH\SOH\ENQ\NUL\ETX\129\203\NUL0\129\199\STX\129\193\NUL\193\219\224\215\181\207g\DLE\SIT\215qY\152\a-\DLE\212I\230B^H\157\192\159\v\175\222\SUB\186t\170\150\185\178\166\144>Tm\189-\212\DC1\204\233\STX\a\253\154_\164/\166\138\231\172D\EOT}\153\191\249\165\146\240Do\DLE\DC2\197XZ\220\184\\\"\SIS4\b4\190m\138$\DC1\181\165\155\199\199\195\136*\SUBC\t\246\155\145\"E\248\204W\190\212\235\167BSE\244+\216\DC1\228z\ACKM_xBh^I\ESC!\136\&0\CAN\167M\FS\EOT\139\151n\r\243T\176\154\ACK\228\204\r\171\248kw\186Kv3\150\130\206\STX.SU\232\191\183\174\248ab\223\158\209\ENQ\RS\135\212+dU\US\133|^\206W\216|\253\250Y\STX\SOH\DC10\r\ACK\t*\134H\134\247\r\SOH\SOH\v\ENQ\NUL\ETX\129\193\NULmf\171\209\&9'\213\215\&9\217\194\207a\232\206\248\246\rGF\153\183\190\230\247D\160\EM9g\234?d\SUB\131c\v\248\CAN\192\168B\a\213 \SUBA&e\NAK\178\145\176\163\&6\ACK\159\208\164nA\202\200p\175\SUB\DC2\245\171\172<\220\167\186S\NUL\237\209\SI\189c\132\197\250\152;\213c\255G\163\199\NUL&\138[\RS*\181_\191}\247\202\247 U\DC3Q\168\255\203\&3\SUB\158\255\193\240\220\f~R_7\186\194\EM-\SOf\226\197\189\252\133\NAK\194P\203\147}]t\137\SIV\156vQ\"\139\245\229C^5a\"^\226\182\STXq?!\180\193\205\b\244\a\DELel\191\r\182\226\151\f\245\180w\EMI\155\&1I\211E[\233"
  )

sampleIdPCertWrong :: X509.SignedCertificate
sampleIdPCertWrong = either (error . show) id $ SAML.parseKeyInfo "<ds:KeyInfo xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"><ds:X509Data><ds:X509Certificate>MIIDpDCCAoygAwIBAgIGAWOMMryDMA0GCSqGSIb3DQEBCwUAMIGSMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzENMAsGA1UECgwET2t0YTEUMBIGA1UECwwLU1NPUHJvdmlkZXIxEzARBgNVBAMMCmRldi02MDc2NDgxHDAaBgkqhkiG9w0BCQEWDWluZm9Ab2t0YS5jb20wHhcNMTgwNTIzMDg1MTA1WhcNMjgwNTIzMDg1MjA1WjCBkjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcMDVNhbiBGcmFuY2lzY28xDTALBgNVBAoMBE9rdGExFDASBgNVBAsMC1NTT1Byb3ZpZGVyMRMwEQYDVQQDDApkZXYtNjA3NjQ4MRwwGgYJKoZIhvcNAQkBFg1pbmZvQG9rdGEuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2HkpOuMhVFUCptrVB/Zm36cuFM+YMQjKdtqEoBJDLbtSbb7uFuvm5rMJ+1VSK5GKAM/Bec5WXTE2WMkifK5JaGOLS7q8+pgiWmqKE3KHMUmLAioe/1jzHkCobxis0FIVhyarRY97w0VMbDGzhPiU7pEopYpicJBzRL2UrzR+PebGgllvnaPzlg8ePtr9/xMv0QTJlYEyCctO4vT5Qa5Xlfek3Ox5yMJM1JPXzn7yuJN5R/Nf8jFprsdBSxNMzkcTRFGy8as2GCt/Xh9H+ef4CxSgRK5UXcUCrb5YMnBehEp2YiuWtw8QsGRR8elgnF3Uw9J2xEDkZIhurPy8OYmGNQIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQA7kxxg2aVjo7Oml83bUWk4UtaQKYMEY74mygG/JV09g1DVMAPAyjaaMFamDSjortKarMQ3ET5tj2DggQBsWQNzsr3iZkmijab8JLwzA2+I1q63S68OaW5uaR5iMR8zZCTh/fWWYqa1AP64XeGHp+RLGfbp/eToNfkQWu7fH2QtDMOeLe5VmIV9pOFHnySszoR/epMd3sdDLVgmz4qbrMTBWD+5rxWdYS2glmRXl7IIQHrdBTRMll7S6ks5prqKFTwfPvZVrTnzD83a39wl2jBJhOQLjmSfSwP9H0YFNb/NRaDbSDS7BPuAlotZsaPZIN95tu+t9wmFwdxcVG/9q/Vu</ds:X509Certificate></ds:X509Data></ds:KeyInfo>"

sampleIdPPubkeyWrong :: HasCallStack => SAML.SignCreds
Right sampleIdPPubkeyWrong = SAML.certToCreds sampleIdPCertWrong
